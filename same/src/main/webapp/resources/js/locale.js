PrimeFaces.locales['pt'] = {
	messages : {
		'javax.faces.component.UIInput.REQUIRED' : 'Campo \'{0}\' é obrigatório',
		'javax.faces.validator.LengthValidator.MAXIMUM' : '{1} deve ter no máximo {0} caracteres',

		'javax.faces.converter.IntegerConverter.INTEGER' : '{2}: \' {0} \'deve ser um número consistindo de um ou mais dígitos.',
		'javax.faces.converter.IntegerConverter.INTEGER_detail' : '{2}: \' {0} \'deve ser um número entre -2147483648 e 2147483647 Exemplo: {1}',
		'javax.faces.converter.DoubleConverter.DOUBLE' : '{2}: \' {0} \'deve ser um número consistindo de um ou mais dígitos.',
		'javax.faces.converter.DoubleConverter.DOUBLE_detail' : '{2}: \' {0} \'deve ser um número entre 4.9E-324 e 1.7976931348623157E308 Exemplo: {1}',
		'javax.faces.converter.BigDecimalConverter.DECIMAL' : '{2}: \' {0} \'deve ser um número decimal assinado.',
		'javax.faces.converter.BigDecimalConverter.DECIMAL_detail' : '{2}: \' {0} \'deve ser um número decimal assinado consistindo de zero ou mais dígitos, que podem ser seguidos por um ponto decimal e uma fração. Exemplo {1}',
		'javax.faces.converter.BigIntegerConverter.BIGINTEGER' : '{2}: \' {0} \'deve ser um número consistindo de um ou mais dígitos.',
		'javax.faces.converter.BigIntegerConverter.BIGINTEGER_detail' : '{2}: \' {0} \'deve ser um número consistindo de um ou mais dígitos. Exemplo {1}',
		'javax.faces.converter.ByteConverter.BYTE' : '{2}: \' {0} \'deve ser um número entre 0 e 255.',
		'javax.faces.converter.ByteConverter.BYTE_detail' : '{2}: \' {0} \'deve ser um número entre 0 e 255. Exemplo: {1}',
		'javax.faces.converter.CharacterConverter.CHARACTER' : '{1}: \' {0} \'deve ser um caractere válido.',
		'javax.faces.converter.CharacterConverter.CHARACTER_detail' : '{1}: \' {0} \'deve ser um caractere ASCII válido.',
		'javax.faces.converter.ShortConverter.SHORT' : '{2}: \' {0} \'deve ser um número consistindo de um ou mais dígitos.',
		'javax.faces.converter.ShortConverter.SHORT_detail' : '{2}: \' {0} \'deve ser um número entre -32768 e 32767 Exemplo: {1}',
		'javax.faces.converter.BooleanConverter.BOOLEAN' : '{1}: \' {0} \'deve ser \' verdadeiro \'ou \' falso \'',
		'javax.faces.converter.BooleanConverter.BOOLEAN_detail' : '{1}: \' {0} \'deve ser \' verdadeiro \'ou \' falso \'. Qualquer valor diferente de \'true \' irá avaliar para \'false \'. ',
		'javax.faces.validator.LongRangeValidator.MAXIMUM' : '{1}: Erro de validação: o valor é maior que o máximo permitido de \' {0} \'',
		'javax.faces.validator.LongRangeValidator.MINIMUM' : '{1}: Erro de validação: O valor é menor que o mínimo permitido de \' {0} \'',
		'javax.faces.validator.LongRangeValidator.NOT_IN_RANGE' : '{2}: Erro de validação: o atributo especificado não está entre os valores esperados de {0} e {1}.',
		'javax.faces.validator.LongRangeValidator.TYPE = {0}' : 'Erro de validação: O valor não é do tipo correto.',
		'javax.faces.validator.DoubleRangeValidator.MAXIMUM' : '{1}: Erro de validação: o valor é maior que o máximo permitido de \' {0} \'',
		'javax.faces.validator.DoubleRangeValidator.MINIMUM' : '{1}: Erro de validação: o valor é menor que o mínimo permitido de \' {0} \'',
		'javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE' : '{2}: Erro de validação: o atributo especificado não está entre os valores esperados de {0} e {1}',
		'javax.faces.validator.DoubleRangeValidator.TYPE = {0}' : 'Erro de validação: O valor não é do tipo correto',
		'javax.faces.converter.FloatConverter.FLOAT' : '{2}: \' {0} \'deve ser um número consistindo de um ou mais dígitos.',
		'javax.faces.converter.FloatConverter.FLOAT_detail' : '{2}: \' {0} \'deve ser um número entre 1.4E-45 e 3.4028235E38 Exemplo: {1}',
		'javax.faces.converter.DateTimeConverter.DATE' : '{2}: \' {0} \'não pode ser entendido como uma data.',
		'javax.faces.converter.DateTimeConverter.DATE_detail' : '{2}: \' {0} \'não pode ser entendido como uma data. Exemplo {1}',
		'javax.faces.converter.DateTimeConverter.TIME' : '{2}: \' {0} \'não pode ser entendido como um tempo.',
		'javax.faces.converter.DateTimeConverter.TIME_detail' : '{2}: \' {0} \'não pode ser entendido como um tempo. Exemplo {1}',
		'javax.faces.converter.DateTimeConverter.DATETIME' : '{2}: \' {0} \'não pode ser entendido como data e hora.',
		'javax.faces.converter.DateTimeConverter.DATETIME_detail' : '{2}: \' {0} \'não pode ser entendido como uma data e hora. Exemplo {1}',
		'javax.faces.converter.DateTimeConverter.PATTERN_TYPE' : '{1}: A \' padrão \'ou \' tipo \'atributo deve ser especificado para converter o valor \' {0} \'',
		'javax.faces.converter.NumberConverter.CURRENCY' : '{2}: \' {0} \'não pode ser entendido como um valor de moeda.',
		'javax.faces.converter.NumberConverter.CURRENCY_detail' : '{2}: \' {0} \'não pode ser entendido como um valor de moeda. Exemplo {1}',
		'javax.faces.converter.NumberConverter.PERCENT' : '{2}: \' {0} \'não pode ser entendido como uma porcentagem.',
		'javax.faces.converter.NumberConverter.PERCENT_detail' : '{2}: \' {0} \'não pode ser entendido como uma porcentagem. Exemplo {1}',
		'javax.faces.converter.NumberConverter.NUMBER' : '{2}: \' {0} \'não pode ser entendido como uma data.',
		'javax.faces.converter.NumberConverter.NUMBER_detail' : '{2}: \'{0}\' não é um número. Exemplo: {1}',
		'javax.faces.converter.NumberConverter.PATTERN' : '{2}: \' {0} \'não é um padrão de número.',
		'javax.faces.converter.NumberConverter.PATTERN_detail' : '{2}: \' {0} \'não é um padrão de número. Exemplo {1}',
		'javax.faces.validator.LengthValidator.MINIMUM' : '{1}: Erro de validação: O comprimento é menor que o mínimo permitido de \' {0} \'',
		'javax.faces.validator.RegexValidator.PATTERN_NOT_SET' : 'O padrão Regex deve ser definido.',
		'javax.faces.validator.RegexValidator.PATTERN_NOT_SET_detail' : 'O padrão Regex deve ser definido como valor não vazio.',
		'javax.faces.validator.RegexValidator.NOT_MATCHED' : 'Regex Pattern não correspondido',
		'javax.faces.validator.RegexValidator.NOT_MATCHED_detail' : 'Regex padrão de \' {0} \'não correspondido',
		'javax.faces.validator.RegexValidator.MATCH_EXCEPTION' : 'Erro na expressão regular',
		'javax.faces.validator.RegexValidator.MATCH_EXCEPTION_detail' : 'Erro na expressão regular, \' {0} \'',
		// opcional para integração de validação de bean na validação do
		// lado do cliente
		'javax.faces.validator.BeanValidator.MESSAGE' : '{0}',
		'javax.validation.constraints.AssertFalse.message' : 'deve ser falso',
		'javax.validation.constraints.AssertTrue.message' : 'deve ser verdade',
		'javax.validation.constraints.DecimalMax.message' : 'deve ser menor ou igual a {0}',
		'javax.validation.constraints.DecimalMin.message' : 'deve ser maior ou igual a {0}',
		'javax.validation.constraints.Digits.message' : 'valor numérico fora dos limites (<{0} dígitos>. <{1} dígitos> esperado)',
		'javax.validation.constraints.Future.message' : 'deve estar no futuro',
		'javax.validation.constraints.Max.message' : 'deve ser menor ou igual a {0}',
		'javax.validation.constraints.Min.message' : 'deve ser maior ou igual a {0}',
		'javax.validation.constraints.NotNull.message' : 'pode não ser nulo',
		'javax.validation.constraints.Null.message' : 'deve ser nulo',
		'javax.validation.constraints.Past.message' : 'deve estar no passado',
		'javax.validation.constraints.Pattern.message' : 'deve corresponder "{0}"',
		'javax.validation.constraints.Size.message' : 'o tamanho deve estar entre {0} e {1}',
		'javax.validation.constraints.Email.message'            : 'n\u00E3o \u00E9 um endere\u00E7o de e-mail',
		'javax.validation.constraints.FutureOrPresent.message'  : 'deve de ser uma data em presente ou em futuro',
		'javax.validation.constraints.Negative.message'         : 'deve ser menor que 0',
		'javax.validation.constraints.NegativeOrZero.message'   : 'deve ser menor ou igual a 0',
		'javax.validation.constraints.NotBlank.message'         : 'n\u00E3o pode estar em branco',
		'javax.validation.constraints.NotEmpty.message'         : 'n\u00E3o pode estar vazio',
		'javax.validation.constraints.PastOrPresent.message'    : 'deve de ser uma data em passado ou em presente',
		'javax.validation.constraints.Positive.message'         : 'deve ser maior que 0',
		'javax.validation.constraints.PositiveOrZero.message'   : 'deve ser maior ou igual a 0',

		'org.hibernate.validator.constraints.CreditCardNumber.message'    : 'n\u00FAmero de cart\u00E3o de cr\u00E9dito inv\u00E1lido',
		'org.hibernate.validator.constraints.Email.message'               : 'n\u00E3o \u00E9 um endere\u00E7o de e-mail',
		'org.hibernate.validator.constraints.EAN.message'                 : 'c\u00F3digo de barras {type} inv\u00E1lido',
		'org.hibernate.validator.constraints.Length.message'              : 'tamanho deve estar entre {min} e {max}',
		'org.hibernate.validator.constraints.CodePointLength.message'     : 'tamanho deve estar entre {min} e {max}',
		'org.hibernate.validator.constraints.LuhnCheck.message'           : 'digito verificador para ${validatedValue} \u00E9 inv\u00E1lido, verifica\u00E7\u00E3o M\u00F3dulo 10 de Luhn falhou',
		'org.hibernate.validator.constraints.Mod10Check.message'          : 'digito verificador para ${validatedValue} \u00E9 inv\u00E1lido, verifica\u00E7\u00E3o M\u00F3dulo 10 falhou',
		'org.hibernate.validator.constraints.Mod11Check.message'          : 'digito verificador para ${validatedValue} \u00E9 inv\u00E1lido, verifica\u00E7\u00E3o M\u00F3dulo 10 falhou',
		'org.hibernate.validator.constraints.ModCheck.message'            : 'digito verificador para ${validatedValue} \u00E9 inv\u00E1lido, verifica\u00E7\u00E3o ${modType} falhou',
		'org.hibernate.validator.constraints.NotBlank.message'            : '{0} n\u00E3o pode estar em branco',
		'org.hibernate.validator.constraints.NotEmpty.message'            : 'n\u00E3o pode estar vazio',
		'org.hibernate.validator.constraints.ParametersScriptAssert.message' : 'o script "{script}" n\u00E3o retornou verdadeiro',
		'org.hibernate.validator.constraints.Range.message'               : 'o valor precisa estar entre {min} e {max}',
		'org.hibernate.validator.constraints.SafeHtml.message'            : 'pode ter conte\u00FAdo inseguro no html',
		'org.hibernate.validator.constraints.ScriptAssert.message'        : 'express\u00E3o de script "{script}" n\u00E3o retornou verdadeiro',
		'org.hibernate.validator.constraints.URL.message'                 : 'deve ser uma URL v\u00E1lida',
		'org.hibernate.validator.constraints.br.CNPJ.message'             : 'CNPJ inv\u00E1lido',
		'org.hibernate.validator.constraints.br.CPF.message'              : 'CPF inv\u00E1lido',
		'org.hibernate.validator.constraints.br.TituloEleitoral.message'	: 'T\u00EDtulo Eleitoral inv\u00E1lido',
		'javax.validation.constraints.Cep.message' : 'Cep inv\u00E1lido'
			

	},
	
	closeText : 'Fechar',
	prevText : 'Anterior',
	nextText : 'Próximo',
	currentText : 'Começo',
	monthNames : [ 'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
			'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro' ],
	monthNamesShort : [ 'Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago',
			'Set', 'Out', 'Nov', 'Dez' ],
	dayNames : [ 'Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta',
			'Sábado' ],
	dayNamesShort : [ 'Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb' ],
	dayNamesMin : [ 'D', 'S', 'T', 'Q', 'Q', 'S', 'S' ],
	weekHeader : 'Semana',
	firstDay : 1,
	isRTL : false,
	showMonthAfterYear : false,
	yearSuffix : '',
	timeOnlyTitle : 'Só Horas',
	timeText : 'Tempo',
	hourText : 'Hora',
	minuteText : 'Minuto',
	secondText : 'Segundo',
	ampm : false,
	month : 'Mês',
	week : 'Semana',
	day : 'Dia',
	allDayText : 'Todo Dia'
}